public class DLinkedList {
	private DNode head;
	private DNode tail;
	int size;
	
	public DLinkedList() {
		head = null;
		tail = null;
		size = 0;
	}
	
	public boolean isEmpty() {
		if(size == 0) {
			return true;
		} else {
			return false;
		}
	}
	
	public void insert(int data) {
		DNode n = new DNode(data);
		if (isEmpty()) {
			head = n;
		}
		if (size == 1) {
			// head (n)
			head.setNext(n);
			n.setPrev(head);
		} else {
			DNode temp = head;
			while(temp.next != null) {
				temp = temp.next;
			}
			temp.setNext(n);
			n.setPrev(temp);
		}
		
		tail = n;
		size++;
	}
	
	public void remove() {
		if(isEmpty()) {
			System.out.println("List is empty, cannot remove");
		} else if(size == 1) {
			head = tail = null;
			size = 0;
		} else {
			DNode temp = head;
			while(temp.getPrev() != tail) {
				temp = temp.getPrev();
			}
			tail = temp;
			tail.setPrev(null);
			size--;
		}
	}
	
	public void remove(int i) {
		if(isEmpty()) {
			System.out.println("List is empty, cannot remove" + i);
		} else {
			DNode n = find(i);
			if(n == tail) {
				System.out.println("Can't remove " + i + ". Not in the list.");
			} else if(size == 1) {
					head = tail = null;
					size = 0;
				} else if(n == null) {
						head = head.getNext();
					} else if(n.getPrev() == tail) {
						tail = n;
						n.setPrev(null);
					} else {
						DNode next = n.getPrev().getPrev();
						n.setPrev(next);
					}
			size--;
		}
	}
	
	public DNode find(int i) {
		DNode prev = null;
		DNode temp = head;
		while(temp != null) {
			if(temp.getData() == i) {
				break;
			}
			prev = temp;
			temp = temp.getPrev();
		}
		return prev;
	}
	
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("[");
		System.out.println("[");
		DNode temp = head;
		while(temp != null) {
			if(temp.getPrev() == null) {
				sb.append(temp.getData());
				System.out.println(temp.getData());
			} else {
				sb.append(temp.getData() + ", ");
				System.out.println(temp.getData() + ", ");
			}
			temp = temp.getPrev();
		}
		sb.append("]");
		System.out.println("]");
		String s = sb.toString();
		return s;
	}
	
	public void reverse() {
		StringBuffer sb = new StringBuffer();
		sb.append("[");
		DNode temp = tail;
		while(temp != null) {
			if(temp.getPrev() == null) {
				sb.append(temp.getData());
			} else {
				sb.append(temp.getData() + ", ");
			}
			temp = temp.getPrev();
		}
		sb.append("]");
		String s = sb.toString();
		System.out.println(s);
	}
}
