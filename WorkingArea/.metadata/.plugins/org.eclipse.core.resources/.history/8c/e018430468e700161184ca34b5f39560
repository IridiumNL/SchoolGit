public class DLinkedList {
	private DNode head;
	private DNode tail;
	int size;
	
	public DLinkedList() {
		head = tail = null;
		size = 0;
	}
	
	public boolean isEmpty() {
		if(size == 0) {
			return true;
		} else {
			return false;
		}
	}
	
	public void insert(int data) {
		DNode n = new DNode();
		n.setData(data);
		if(isEmpty()) {
			head = n;
		} else {
			tail.setTail(n);
		}
		tail = n;
		size++;
	}
	
	public void remove() {
		if(isEmpty()) {
			System.out.println("List is empty, cannot remove");
		} else if(size == 1) {
			head = tail = null;
			size = 0;
		} else {
			DNode temp = head;
			while(temp.getTail() != tail) {
				temp = temp.getTail();
			}
			tail = temp;
			tail.setTail(null);
			size--;
		}
	}
	
	public void remove(int i) {
		if(isEmpty()) {
			System.out.println("List is empty, cannot remove" + i);
		} else {
			DNode n = find(i);
			if(n == tail) {
				System.out.println("Can't remove " + i + ". Not in the list.");
			} else if(size == 1) {
					head = tail = null;
					size = 0;
				} else if(n == null) {
						head = head.getHead();
					} else if(n.getTail() == tail) {
						tail = n;
						n.setTail(null);
					} else {
						DNode next = n.getTail().getTail();
						n.setTail(next);
					}
			size--;
		}
	}
	
	public DNode find(int i) {
		DNode prev = null;
		DNode temp = head;
		while(temp != null) {
			if(temp.getData() == i) {
				break;
			}
			prev = temp;
			temp = temp.getTail();
		}
		return prev;
	}
}
